1 DISPLAY THOSE EXISTING EMPLOYEE_ID WHO HAVE GOT PROMOTION.
  
  SELECT EMPLOYEE_ID FROM EMPLOYEES INTERSECT SELECT EMPLOYEE_ID FROM JOB_HISTORY;	
  
2 DISPLAY THOSE EMPLOYEE_ID WHO HAVE LEFT THE COMPANY.
  
  SELECT EMPLOYEE_ID FROM JOB_HISTORY MINUS SELECT EMPLOYEE_ID FROM EMPLOYEES;
  
3 DISPLAY ALL FIRST_NAME AND DEPARTMENT_NAME IN SINGLE RESULT SET WITH PROPER COLUMN HEADING.
	SELECT FIRST_NAME FROM EMPLOYEES
	UNION ALL 
	SELECT DEPARTMENT_NAME FROM DEPARTMENTS;
  
4 DISPLAY DEPARTMENT_ID IN WHICH NO EMPLOYEE IS HIRED.

	SELECT DEPARTMENT_ID FROM DEPARTMENTS
	MINUS
	SELECT DEPARTMENT_ID FROM EMPLOYEES;
  
5 DISPLAY THOSE REGION_ID IN WHICH NO LOCATION EXISTS.
  
	SELECT REGION_ID FROM REGIONS
	MINUS
	SELECT REGION_ID FROM COUNTRIES WHERE COUNTRY_ID IN (SELECT COUNTRY_ID FROM LOCATIONS);

  
6 DISPLAY GRADE_LEVEL IN WHICH NO EMPLOYEE IS GETTING SALARY
SELECT GRADE_LEVEL FROM JOB_GRADES MINUS 
SELECT GRADE_LEVEL FROM JOB_GRADES JOIN EMPLOYEES ON SALARY BETWEEN LOWEST_SAL AND HIGHEST_SAL
  
7 DISPLAY COUNTRY_ID IN WHICH NO LOCATION EXISTS.
	SELECT COUNTRY_ID FROM COUNTRIES MINUS SELECT COUNTRY_ID FROM LOCATIONS;
  
8 DISPLAY ONLY THOSE DEPARTMENT_NAME IN WHICH EMPLOYEES ARE WORKING.

	SELECT DEPARTMENT_NAME FROM DEPARTMENTS WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID FROM DEPARTMENTS  
	INTERSECT SELECT DEPARTMENT_ID FROM EMPLOYEES);


9 DISPLAY THOSE EXISTING EMPLOYEE'S FIRST_NAME WHO HAVE NOT GOT ANY PROMOTION.

	SELECT FIRST_NAME 
	FROM EMPLOYEES WHERE EMPLOYEE_ID IN(SELECT EMPLOYEE_ID FROM EMPLOYEES MINUS SELECT EMPLOYEE_ID FROM JOB_HISTORY);

10 DISPLAY ONLY THOSE COUNTRY_NAME IN WHICH LOCATION EXISTS.

	SELECT COUNTRY_NAME FROM COUNTRIES WHERE COUNTRY_ID IN 
	(SELECT COUNTRY_ID FROM COUNTRIES INTERSECT SELECT COUNTRY_ID FROM LOCATIONS);

11 DISPLAY ONLY THOSE REGION_NAME IN WHICH COUNTRY EXISTS.

	SELECT REGION_NAME FROM REGIONS WHERE REGION_ID IN
	 (SELECT REGION_ID FROM REGIONS INTERSECT SELECT REGION_ID FROM COUNTRIES);

12 DISPLAY THOSE JOB_ID FOR WHICH EMPLOYEES WERE HIRED UNTIL YEAR 95, BUT NOT AFTER THAT.

	SELECT JOB_ID,HIRE_DATE FROM EMPLOYEES MINUS SELECT JOB_ID,HIRE_DATE FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'RR')>95;

13 DISPLAY THOSE JOB_ID FOR WHICH EMPLOYEES WERE HIRED UNTIL YEAR 95, AS WELL AS AFTER 95.

	SELECT HIRE_DATE FROM EMPLOYEES;

14 DISPLAY DEPARTMENT_ID FOR WHICH COMPANY HIRED EMPLOYEES IN FIRST HALF OF ANY YEAR AS WELL AS SECOND HALF OF ANY YEAR.

	SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'MM')<=06 UNION SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'MM')>06;

15 DISPLAY DEPARTMENT_ID FOR WHICH COMPANY HIRED EMPLOYEES IN FIRST HALF OF ANY YEAR BUT NOT IN SECOND HALF OF ANY YEAR.

	SELECT DEPARTMENT_ID FROM EMPLOYEES  MINUS SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'MM')>06;

16 DISPLAY JOB_ID FOR WHICH EMPLOYEE GETS SALARY UPTO 8000 AS WELL AS MORE THAN 8000.

	SELECT JOB_ID FROM EMPLOYEES WHERE SALARY <8000 UNION ALL SELECT  JOB_ID FROM 	EMPLOYEES WHERE SALARY>=8000;

17 DISPLAY JOB_ID FOR WHICH EMPLOYEE GETS SALARY UPTO 8000 BUT NOT MORE THAN 8000.

	SELECT JOB_ID,SALARY FROM EMPLOYEES MINUS SELECT JOB_ID,SALARY FROM EMPLOYEES WHERE 	SALARY>8000;

18 DISPLAY JOB_ID FOR WHICH EMPLOYEE GETS SALARY MORE THAN 10000 BUT NOT UPTO 10000.

	SELECT JOB_ID,SALARY FROM EMPLOYEES MINUS SELECT JOB_ID,SALARY FROM EMPLOYEES WHERE 	SALARY<=10000;

19 DISPLAY DEPARTMENT_ID , MANAGER_ID FOR THOSE EMPLOYEES WHO REPORT TO HIS DEPARTMENT HEAD.

	SELECT DEPARTMENT_ID,MANAGER_ID FROM EMPLOYEES INTERSECT (SELECT 	DEPARTMENT_ID,MANAGER_ID FROM DEPARTMENTS);

20 DISPLAY DEPARTMENT_ID , MANAGER_ID FOR THOSE EMPLOYEES WHO DOESN'T REPORT TO HIS DEPARTMENT HEAD.

	SELECT DEPARTMENT_ID,MANAGER_ID FROM EMPLOYEES MINUS (SELECT DEPARTMENT_ID,MANAGER_ID 	FROM DEPARTMENTS);
	

21 DISPLAY THOSE JOB_ID FOR WHICH EMPLOYEES WERE HIRED IN ODD QUARTERS BUT NOT IN EVEN QUARTERS. (IGNORE YEAR)

	SELECT JOB_ID,TO_CHAR(HIRE_DATE,'Q') FROM EMPLOYEES MINUS SELECT 	JOB_ID,TO_CHAR(HIRE_DATE,'Q') FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'Q') IN (2,4)

==========================================================
FOR SOLVING BELOW QUESTIONS USE MPSEMP AND MPSDEPT TABLES.
==========================================================

22 DISPLAY ALL JOBS INCLUDING DUPLICATE FOR DEPTNO 20 AND 30.

	SELECT JOB FROM MPSEMP WHERE DEPTNO=20 UNION ALL SELECT JOB FROM MPSEMP WHERE DEPTNO=30;

23 DISPLAY ALL DISTINCT JOB FOR WHICH EMPLOYEES ARE HIRED IN BOTH DEPTNO 10 AND 30.

	SELECT JOB FROM MPSEMP WHERE DEPTNO=10 UNION SELECT JOB FROM MPSEMP WHERE DEPTNO=30;

24 DISPLAY ALL DNAME AND LOC IN SINGLE COLUMN (ONE ABOVE THE OTHER) WITH PROPER COLUMN HEADING.

	SELECT DNAME DNAME_LOC FROM MPSDEPT UNION ALL SELECT LOC FROM MPSDEPT; 

25 DISPLAY ONLY THOSE JOBS FOR WHICH EMPLOYEES ARE HIRED IN DEPTNO 30 BUT NOT FOR REMAINING DEPARTMENTS.

	SELECT JOB,DEPTNO FROM MPSEMP MINUS SELECT JOB,DEPTNO FROM MPSEMP WHERE DEPTNO <>30;	

26 DISPLAY ALL JOBS OF DEPTNO 10 AND 20 WHICH ARE NOT PRESENT IN DEPTNO 30.

	SELECT JOB,DEPTNO FROM MPSEMP WHERE DEPTNO IN(10,20) MINUS SELECT JOB,DEPTNO FROM 	MPSEMP WHERE DEPTNO =30;

27 DISPLAY ONLY THOSE JOBS FOR WHICH COMPANY HAS HIRED EMPLOYEES ON BOTH YEARS 1981 AND 1982.

	SELECT JOB,HIREDATE FROM MPSEMP MINUS SELECT JOB,HIREDATE FROM MPSEMP WHERE 	TO_CHAR(HIREDATE,'RRRR') NOT IN (1981,1982); 


28 (USE EMPLOYEES TABLE) DISPLAY THOSE JOBS FOR WHICH COMPANY HAS HIRED EMPLOYEES IN BOTH 1996 AND 1998 BUT NOT IN 1999.

	SELECT JOB_ID,TO_CHAR(HIRE_DATE,'RR') FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'RR') IN 	(96,98) MINUS SELECT JOB_ID ,TO_CHAR(HIRE_DATE,'RR') FROM EMPLOYEES WHERE 	TO_CHAR(HIRE_DATE,'RR') =99
	

29 DISPLAY STAFF, SUBJECT AND COLUMN NAMED CAN. WHICH SHOULD DISPLAY YES OR NO, BASED ON STAFF CAN TEACH THE SUBJECT OR NOT.

	

30 DISPLAY JOB_ID AND SUM OF SALARY PAID TO EACH JOB AND DEPTNO AND NO. EMPLOYEES WORKS FOR EACH DEPTNO ONE ABOVE THE ANOTHER IN SINGLE RESULT SET. SORT RESULT ON LAST COLUMN.

31 DEVELOP ENAME AND EMPNO AS FIRST RESULT SET. DNAME AS SECOND RESULT SET AND CLUB BOTH VERTICALLY.

32 DEVELOP DEPTNO AND HIREDATE AS FIRST RESULT SET. ENAME AND DEPTNO AS SECOND RESULT SET. DISPLAY THEM AS SINGLE RESULT SET.




===============================================================================
1 DISPLAY THOSE EXISTING EMPLOYEE_ID WHO HAVE GOT PROMOTION.
==> SELECT FIRST_NAME, EMPLOYEE_ID FROM EMPLOYEES WHERE EMPLOYEE_ID IN
(SELECT EMPLOYEE_ID FROM EMPLOYEES INTERSECT SELECT EMPLOYEE_ID FROM JOB_HISTORY);

2 DISPLAY THOSE EMPLOYEE_ID WHO HAVE LEFT THE COMPANY.
SELECT EMPLOYEE_ID FROM JOB_HISTORY MINUS SELECT EMPLOYEE_ID FROM EMPLOYEES;  

3 DISPLAY ALL FIRST_NAME AND DEPARTMENT_NAME IN SINGLE RESULT SET WITH PROPER COLUMN HEADING.
SELECT FIRST_NAME "FIRST_NAME AND DEPARTMENT_NAME"  FROM EMPLOYEES
UNION ALL
SELECT DEPARTMENT_NAME FROM DEPARTMENTS;
	
4 DISPLAY DEPARTMENT_ID IN WHICH NO EMPLOYEE IS HIRED.
SELECT DEPARTMENT_ID FROM DEPARTMENTS MINUS SELECT DEPARTMENT_ID FROM EMPLOYEES;

5 DISPLAY THOSE REGION_ID IN WHICH NO LOCATION EXISTS.
 ==> SELECT REGION_ID FROM REGIONS
	MINUS 
	SELECT REGION_ID FROM COUNTRIES;

==>	SELECT REGION_ID FROM REGIONS 
	MINUS 
    (SELECT REGION_ID FROM COUNTRIES WHERE COUNTRY_ID IN (SELECT COUNTRY_ID FROM LOCATIONS)) 

6 DISPLAY GRADE_LEVEL IN WHICH NO EMPLOYEE IS GETTING SALARY.
SELECT GRADE_LEVEL FROM JOB_GRADES MINUS (SELECT GRADE_LEVEL FROM EMPLOYEES JOIN JOB_GRADES ON SALARY BETWEEN LOWEST_SAL AND HIGHEST_SAL);

7 DISPLAY COUNTRY_ID IN WHICH NO LOCATION EXISTS.
==>  SELECT COUNTRIES.COUNTRY_ID FROM COUNTRIES MINUS (SELECT LOCATIONS.COUNTRY_ID FROM LOCATIONS JOIN COUNTRIES ON COUNTRIES.COUNTRY_ID = LOCATIONS.COUNTRY_ID);

==> SELECT COUNTRY_ID FROM COUNTRIES
    MINUS 
	SELECT COUNTRY_ID FROM LOCATIONS;

8 DISPLAY ONLY THOSE DEPARTMENT_NAME IN WHICH EMPLOYEES ARE WORKING.
SELECT DEPARTMENT_NAME FROM DEPARTMENTS WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID FROM DEPARTMENTS INTERSECT SELECT DEPARTMENT_ID FROM EMPLOYEES);	

9 DISPLAY THOSE EXISTING EMPLOYEE'S FIRST_NAME WHO HAVE NOT GOT ANY PROMOTION.
SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES WHERE EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM EMPLOYEES MINUS SELECT EMPLOYEE_ID FROM JOB_HISTORY);

10 DISPLAY ONLY THOSE COUNTRY_NAME IN WHICH LOCATION EXISTS.
==> SELECT COUNTRY_NAME FROM COUNTRIES  WHERE COUNTRY_ID IN (SELECT COUNTRY_ID FROM COUNTRIES INTERSECT SELECT COUNTRY_ID FROM LOCATIONS);
==> SELECT COUNTRY_NAME FROM COUNTRIES WHERE COUNTRY_ID NOT IN (SELECT COUNTRY_ID FROM COUNTRIES MINUS SELECT COUNTRY_ID FROM LOCATIONS);

11 DISPLAY ONLY THOSE REGION_NAME IN WHICH COUNTRY EXISTS.
SELECT REGION_NAME FROM REGIONS WHERE REGION_ID NOT IN(SELECT REGION_ID FROM REGIONS MINUS SELECT REGION_ID FROM COUNTRIES);
SELECT REGION_NAME FROM REGIONS WHERE REGION_ID IN(SELECT REGION_ID FROM REGIONS INTERSECT SELECT REGION_ID FROM COUNTRIES);

12 DISPLAY THOSE JOB_ID FOR WHICH EMPLOYEES WERE HIRED UNTIL YEAR 95, BUT NOT AFTER THAT.
SELECT JOB_ID, HIRE_DATE FROM EMPLOYEES MINUS
SELECT JOB_ID , HIRE_DATE FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'RR')>'95';	

13 DISPLAY THOSE JOB_ID FOR WHICH EMPLOYEES WERE HIRED UNTIL YEAR 95, AS WELL AS AFTER 95.
==>SELECT JOB_ID, HIRE_DATE FROM EMPLOYEES WHERE HIRE_dATE IN (SELECT HIRE_DATE FROM EMPLOYEES WHERE HIRE_DATE >='01-DEC-95' UNION SELECT HIRE_DATE FROM EMPLOYEES WHERE HIRE_DATE >= '01-DEC-95')

14 DISPLAY DEPARTMENT_ID FOR WHICH COMPANY HIRED EMPLOYEES IN FIRST HALF OF ANY YEAR AS WELL AS SECOND HALF OF ANY YEAR.
==> DISPLAY THOSE JOB_ID FOR WHICH EMPLOYEES WERE HIRED UNTIL YEAR 95, AS WELL AS AFTER 95.

15 DISPLAY DEPARTMENT_ID FOR WHICH COMPANY HIRED EMPLOYEES IN FIRST HALF OF ANY YEAR BUT NOT IN SECOND HALF OF ANY YEAR.

16 DISPLAY JOB_ID FOR WHICH EMPLOYEE GETS SALARY UPTO 8000 AS WELL AS MORE THAN 8000.
SELECT JOB_ID FROM EMPLOYEES WHERE SALARY < 8000 UNION ALL SELECT JOB_ID FROM EMPLOYEES WHERE SALARY > 8000;

17 DISPLAY JOB_ID FOR WHICH EMPLOYEE GETS SALARY UPTO 8000 BUT NOT MORE THAN 8000.
SELECT JOB_ID,SALARY FROM EMPLOYEES INTERSECT SELECT JOB_ID,SALARY FROM EMPLOYEES WHERE SALARY <= 8000;
SELECT JOB_ID,SALARY FROM EMPLOYEES MINUS SELECT JOB_ID,SALARY FROM EMPLOYEES WHERE 	SALARY>8000;

18 DISPLAY JOB_ID FOR WHICH EMPLOYEE GETS SALARY MORE THAN 10000 BUT NOT UPTO 10000.
SELECT JOB_ID,SALARY FROM EMPLOYEES MINUS SELECT JOB_ID, SALARY FROM EMPLOYEES WHERE SALARY <= 10000;
SELECT JOB_ID,SALARY FROM EMPLOYEES INTERSECT SELECT JOB_ID, SALARY FROM EMPLOYEES WHERE SALARY > 10000;

19 DISPLAY DEPARTMENT_ID , MANAGER_ID FOR THOSE EMPLOYEES WHO REPORT TO HIS DEPARTMENT HEAD.
SELECT DEPARTMENT_ID, MANAGER_ID FROM EMPLOYEES INTERSECT (SELECT DEPARTMENT_ID , MANAGER_ID FROM DEPARTMENTS);

20 DISPLAY DEPARTMENT_ID , MANAGER_ID FOR THOSE EMPLOYEES WHO DOESN'T REPORT TO HIS DEPARTMENT HEAD.
SELECT DEPARTMENT_ID, MANAGER_ID FROM EMPLOYEES MINUS (SELECT DEPARTMENT_ID, MANAGER_ID FROM DEPARTMENTS);

21 DISPLAY THOSE JOB_ID FOR WHICH EMPLOYEES WERE HIRED IN ODD QUARTERS BUT NOT IN EVEN QUARTERS. (IGNORE YEAR)

==========================================================
FOR SOLVING BELOW QUESTIONS USE MPSEMP AND MPSDEPT TABLES.
==========================================================

22 DISPLAY ALL JOBS INCLUDING DUPLICATE FOR DEPTNO 20 AND 30.
==> SELECT JOB FROM MPSEMP WHERE DEPTNO = 20 UNION ALL SELECT JOB FROM MPSEMP WHERE DEPTNO = 30;

23 DISPLAY ALL DISTINCT JOB FOR WHICH EMPLOYEES ARE HIRED IN BOTH DEPTNO 10 AND 30.
==>SELECT JOB FROM MPSEMP WHERE DEPTNO = 10 UNION SELECT JOB FROM MPSEMP WHERE DEPTNO = 30;

24 DISPLAY ALL DNAME AND LOC IN SINGLE COLUMN (ONE ABOVE THE OTHER) WITH PROPER COLUMN HEADING.
==> SELECT DNAME FROM MPSDEPT
	UNION ALL 
	SELECT LOC FROM MPSDEPT;

25 DISPLAY ONLY THOSE JOBS FOR WHICH EMPLOYEES ARE HIRED IN DEPTNO 30 BUT NOT FOR REMAINING DEPARTMENTS.
==> SELECT JOB FROM MPSEMP WHERE DEPTNO IN (SELECT DEPTNO FROM MPSEMP WHERE DEPTNO = 30 UNION SELECT DEPTNO FROM MPSEMP WHERE DEPTNO = 30);

26 DISPLAY ALL JOBS OF DEPTNO 10 AND 20 WHICH ARE NOT PRESENT IN DEPTNO 30.
==> SELECT JOB FROM MPSEMP WHERE DEPTNO IN (SELECT DEPTNO FROM MPSEMP WHERE DEPTNO IN (10,20) MINUS SELECT DEPTNO FROM MPSEMP WHERE DEPTNO = 30);