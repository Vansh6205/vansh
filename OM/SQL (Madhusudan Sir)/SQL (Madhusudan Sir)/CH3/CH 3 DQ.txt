1. DISPLAY FIRST NAME AND FIRST_NAME WITH LENGTH 6 OR MORE. DISPLAY FIRST TWO CHARACTERS IN SMALL CASE, LAST TWO CHARACTERS IN CAPITAL AND ALL REMAINING CHARACTERS IN CAMEL CASE.
 -> SELECT SUBSTR(LOWER(FIRST_NAME),1, 2) || INITCAP(SUBSTR(FIRST_NAME, 3, LENGTH(FIRST_NAME) - 2)) || SUBSTR(UPPER(FIRST_NAME), -2) FROM EMPLOYEES WHERE LENGTH(FIRST_NAME) >= 6;

2. DISPLAY LAST_NAME AND ANOTHER LAST_NAME COLUMN WITH ALL VOWELS IN CAPITAL AND CONSONENTS IN SMALL CASE.
 -> SELECT LAST_NAME, TRANSLATE(LOWER(LAST_NAME), 'aeiou', 'AEIOU') FROM EMPLOYEES;                            
 
3. DISPLAY FIRST_NAME AND ANOTHER COLUMN, IT SHOULD DISPLAY * FOR EACH CONSONENT AND + FOR EACH VOWELS.
 -> SELECT FIRST_NAME, TRANSLATE(TRANSLATE(LOWER(FIRST_NAME), 'aeiou', '*****'), 'qwrtypsdfghjklzxcvbnm', '+++++++++++++++++++++') FROM EMPLOYEES;
 
4. DISPLAY EMAIL AND IDENTICAL RESULT OF EMAIL COLUMN USING FIRST_NAME AND LAST_NAME COLUMNS. (DON'T USE ||)
 -> SELECT EMAIL, CONCAT(SUBSTR(UPPER(FIRST_NAME), 1, 2), SUBSTR(UPPER(TRANSLATE(LAST_NAME, '* ', ' ')), 1, 7)) FROM EMPLOYEES;
 
5. DISPLAY FIRST_NAME AND OTHER COLUMN WHICH WILL REMOVE ALL VOWELS FROM RIGHT AND ALL CONSONENTS FROM LEFT.
 -> SELECT FIRST_NAME, RTRIM(LTRIM(LOWER(FIRST_NAME), 'aeiou'), 'qwrtypsdfghjklzxcvbnm') FROM EMPLOYEES;

6. DISPLAY FIRST_NAME AND OTHER COLUMN BY REMOVING ALL VOWELS.
 -> SELECT FIRST_NAME, TRANSLATE(LOWER(FIRST_NAME), '*aeiou', '*') FROM EMPLOYEES;

7. DISPLAY LAST_NAME AND OTHER COLUMN. REPLACE i WITH ee, u WITH oo.
 -> SELECT LAST_NAME, REPLACE(REPLACE(LAST_NAME, 'i', 'ee'), 'u', 'oo') FROM EMPLOYEES;
 
8. DISPLAY THOSE FIRST_NAME WHICH HAS ATLEAST 3 VOWELS.
 ->  SELECT FIRST_NAME FROM EMPLOYEES WHERE LENGTH(TRANSLATE(UPPER(FIRST_NAME), '*QWRTYPSDFGHJKLZXCVBNM', '*')) >= 3;

9. DISPLAY ALL FIRST_NAME AND LAST_NAME IF ANY ONE OF IT HAS 2 OR MORE VOWELS.
 -> SELECT FIRST_NAME, LAST_NAME FROM EMPLOYEES WHERE LENGTH(TRANSLATE(UPPER(LAST_NAME)), '*QWRTYPSDFGHJKLZXCVBNM', '*') >= 2 AND LENGTH(TRANSLATE(UPPER(LAST_NAME)), '*QWRTYPSDFGHJKLZXCVBNM', '*') >= 2;

10. DISPLAY SALARY AND BONUS. BONUS IS 33.36% OF ANNUAL SALARY. DISPLAY BONUS BY TRUNCATING THE VALUE IN THOUSANDS AND ROUNDING THE VALUE IN HUNDREDS.
 ->  SELECT FIRST_NAME, LAST_NAME FROM EMPLOYEES WHERE LENGTH(TRANSLATE(UPPER(LAST_NAME), '*QWRTYPSDFGHJKLZXCVBNM', '*')) >= 2 AND LENGTH(TRANSLATE(UPPER(LAST_NAME), '*QWRTYPSDFGHJKLZXCVBNM', '*')) >= 2;
 
11. COMPANY PAYS IN NEXT MONTH ON FIRST WEDNESDAY AFTER DATE 10. DISPLAY FIRST PAYMENT DATE.
 -> SELECT HIRE_DATE, NEXT_DAY(ADD_MONTHS(TRUNC(HIRE_DATE, 'MM'), 1) + 10, 'WEDNESDAY') FROM EMPLOYEES;
 
12. COMPANY PAYS IN NEXT MONTH ON FIRST WEDNESDAY AFTER DATE 10. DISPLAY LAST PAYMENT DATE.
 -> SELECT HIRE_DATE, NEXT_DAY(TRUNC(SYSDATE, 'MM') + 10, 'WEDNESDAY') LAST_PAYMENT FROM EMPLOYEES;

13. COMPANY PAYS IN NEXT MONTH ON FIRST WEDNESDAY AFTER DATE 10. DISPLAY NEXT PAYMENT DATE.
 -> SELECT HIRE_DATE, NEXT_DAY(ADD_MONTHS(TRUNC(SYSDATE, 'MM'), 1) + 10, 'WEDNESDAY') NEXT_PAYMENT FROM EMPLOYEES;
 
14. COMPANY PAYS FORTNIGHTLY (EVERY 15 DAYS, ON 1ST OR ON 16TH.) DISPLAY FIRST PAYMENT DATE.
 -> SELECT HIRE_DATE, NVL2(NULLIF(TRUNC(HIRE_DATE, 'MM'), ROUND(HIRE_DATE, 'MM')), LAST_DAY(HIRE_DATE) + 1, TRUNC(HIRE_DATE, 'MM') + 15) PAYMENT FROM EMPLOYEES;

15. DISPLAY FIRST_NAME , SALARY , BONUS , LAST 3 DIGITS OF BONUS. BONUS = ANNUAL SALARY * .4589
 -> SELECT FIRST_NAME, SALARY, SALARY * 10 * .4589 BONUS, SUBSTR(TRUNC(SALARY * 10 * .4589), -3) FROM EMPLOYEES;
 
16. DISPLAY FIRST_NAME , SALARY , NEW_TRUNC_SALARY , NEW_ROUND_SALARY AND EXTRA COLUMN, WHICH SHOULD DISPLAY EQUAL IF 3RD AND 4TH COLUUMNS HAVE SAME VALUES. (TRUNC AND ROUND SALARIES IN THOUSANDS)
 -> SELECT FIRST_NAME, SALARY, TRUNC(SALARY, -3) NEW_TRUNC_SALARY, ROUND(SALARY, -3), NVL2(NULLIF(TRUNC(SALARY, -3), ROUND(SALARY, -3)), '', 'EQUAL') NEW_ROUND_SALARY FROM EMPLOYEES;
 
17. DISPLAY FIRST_NAME , SALARY , SALARY * 1.1437 (NEW SALARY) AND ONLY FRACTIONAL PART OF NEW SALARY. (DON'T USE TRUNC OR ROUND FUNCTION)
 -> SELECT FIRST_NAME, SALARY, LTRIM(SALARY * 1.1437, '1234567890') "NEW SALARY" FROM EMPLOYEES;

18. DISPLAY FIRST_NAME , SALARY , SALARY * 1.1437 (NEW SALARY) , TRUNC NEW SALARY IN HUNDREDS (USING TRUNC FUNCTION) , TRUNC NEW SALARY IN HUNDREDS (WITHOUT USING TRUNC FUNCTION).
 -> SELECT FIRST_NAME, SALARY, SALARY * 1.1437 "NEW SALARY", TRUNC(SALARY * 1.1437, -2),  RPAD(SUBSTR(TRANSLATE(RTRIM(SALARY * 1.1437, '1234567890'), '*.', '*'), 0, LENGTH(TRANSLATE(RTRIM(SALARY * 1.1437, '1234567890'), '*.', '*')) - 2), LENGTH(SUBSTR(TRANSLATE(RTRIM(SALARY * 1.1437, '1234567890'), '*.', '*'), 0, LENGTH(TRANSLATE(RTRIM(SALARY * 1.1437, '1234567890'), '*.', '*')) - 2)) + 2,'0') FROM EMPLOYEES;

19. COMPANY PAYS ON EACH THURSDAY, DISPLAY FIRST_NAME , SYSDATE , HIRE_DATE , FIRST_SALARY_DATE WITH DAY NAME.
 -> SELECT FIRST_NAME, SYSDATE, HIRE_DATE, NEXT_DAY(HIRE_DATE, 'THU') FIRST_SALARY_DATE FROM EMPLOYEES;
 
20. COMPANY PAYS ON EACH WEDNESDAY, DISPLAY LAST_NAME , HIRE_DATE , SYSDATE , LAST_SALARY_DATE.
 -> SELECT LAST_NAME, HIRE_DATE, SYSDATE, NEXT_DAY(SYSDATE, 'WED') - 7 LAST_SALARY_DATE FROM EMPLOYEES;
 
21. COMPANY PAYS ON LAST DATE OF EACH MONTH. DISPLAY DATE OF LAST SALARY RECIEVED.
 -> SELECT ADD_MONTHS(LAST_DAY(SYSDATE), -1) FROM DUAL;
 
22. COMPANY PAYS ON LAST DATE OF EACH MONTH, DISPLAY FIRST SALARY DATE.
 -> SELECT FIRST_NAME, HIRE_DATE, LAST_DAY(HIRE_DATE) FROM EMPLOYEES;
 
23. COMPANY PAYS ON 1ST DATE OF NEXT MONTH, DISPLAY FIRST SALARY DATE.
 -> SELECT FIRST_NAME, HIRE_DATE, LAST_DAY(HIRE_DATE) + 1 FROM EMPLOYEES;
 
24. COMPANY PAYS ON 1ST DATE OF NEXT MONTH, DISPLAY DATE OF LAST SALARY RECD.
 -> SELECT ADD_MONTHS(LAST_DAY(SYSDATE) + 1, -1) FROM DUAL;
 
25. COMPANY PAYS ON FIRST THURSDAY OF NEXT MONTH. DISPLAY FIRST SALARY DATE WITH DAY NAME.
 -> SELECT FIRST_NAME, HIRE_DATE, NEXT_DAY(LAST_DAY(HIRE_DATE) + 1, 'THU') FROM EMPLOYEES;

26. COMPANY PAYS ON FIRST MONDAY OF NEXT MONTH. DISPLAY DATE OF LAST SALARY RECD.
 -> SELECT NEXT_DAY(ADD_MONTHS(LAST_DAY(SYSDATE) + 1, -1), 'MON') FROM DUAL;
 
27. COMPANY PAYS ON 7TH DATE OF NEXT MONTH, DISPLAY DATE OF LAST SALARY RECD.
 -> SELECT TRUNC(SYSDATE, 'MM') + 6 FROM DUAL;
 
28. COMPANY PAYS ON 7TH DATE OF NEXT MONTH, DISPLAY FIRST SALARY DATE WITH DAY NAME.
 -> SELECT FIRST_NAME, HIRE_DATE, LAST_DAY(HIRE_DATE) + 7 FIRST_SALARY_DATE FROM EMPLOYEES;
 
29. COMPANY PAYS ON SECOND WEDNESDAY OF NEXT MONTH. DISPLAY FIRST SALARY DATE WITH DAY NAME.
 -> SELECT FIRST_NAME, HIRE_DATE, NEXT_DAY(LAST_DAY(HIRE_DATE) + 1, 'WED') + 7 FROM EMPLOYEES;
 
30. COMPANY PAYS ON THIRD TUESDAY OF NEXT MONTH, DISPLAY DATE OF LAST SALARY RECD.
 -> SELECT NEXT_DAY(ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -1), 'THU') + 21 LAST_SALARY_DAY FROM DUAL;
 
31. COMPANY PAYS ON LAST SATURDAY OF CURRENT MONTH. DISPLAY FIRST SALARY DATE WITH DAY NAME.
 -> SELECT FIRST_NAME, HIRE_DATE, NEXT_DAY(LAST_DAY(HIRE_DATE), 'SAT') - 7 FIRST_SALARY_DATE FROM EMPLOYEES;
 
32. COMPANY PAYS ON LAST FRIDAY OF CURRENT MONTH. DISPLAY DATE OF LAST SALARY RECD WITH DAY NAME.
 -> SELECT NEXT_DAY(TRUNC(SYSDATE, 'MM') - 1, 'FRI') - 7 FROM DUAL;
 
33. DISPLAY FIRST_NAME , HIRE_DATE , TOTAL YEARS COMPLETED.
 -> SELECT FIRST_NAME, HIRE_DATE, TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE) / 12) "TOTAL YEARS COMPLETED" FROM EMPLOYEES;
 
34. DISPLAY FIRST_NAME , HIRE_DATE , TOTAL MONTHS COMPLETED.
 -> SELECT FIRST_NAME, HIRE_DATE, TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) "TOTAL MONTHS COMPLETED" FROM EMPLOYEES;
 
35. DISPLAY LAST_NAME , HIRE_DATE , TOTAL DAYS COMPLETED.
 -> SELECT LAST_NAME, HIRE_DATE, TRUNC(SYSDATE - HIRE_DATE) "TOTAL DAYS COMPLETED" FROM EMPLOYEES;
 
36. DISPLAY LAST_NAME , HIRE_DATE , TOTAL YEARS COMPLETED , EXTRA MONTHS COMPLETED.
 -> SELECT LAST_NAME, HIRE_DATE, TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE) / 12) "TOTAL YEARS COMPLETED", TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) - TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE) / 12) * 12 "EXTRA MONTHS COMPLETED" FROM EMPLOYEES;
 
37. DISPLAY LAST_NAME , HIRE_DATE , TOTAL YEARS COMPLETED , EXTRA MONTHS COMPLETED , EXTRA DAYS COMPLETED.
 -> SELECT LAST_NAME, HIRE_DATE, TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE) / 12) TOTAL_YEARS_COMPLETED, TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) - (TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE) / 12) * 12) EXTRA_MONTHS_COMPLETED, TRUNC(SYSDATE - HIRE_DATE) - (TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE) / 12) * 365) - ((TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) - (TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE) / 12) * 12)) * 30) EXTRA_DAYS_COMPLETED FROM EMPLOYEES;

38. DISPLAY LAST_NAME , HIRE_DATE , TOTAL WEEKS COMPLETED , TOTAL QUARTERS COMPLETED.
 -> SELECT LAST_NAME, HIRE_DATE, TRUNC((SYSDATE - HIRE_DATE) / 7) TOTAL_WEEKS_COMPLETED, TRUNC((MONTHS_BETWEEN(SYSDATE, HIRE_DATE) / 12) * 4) TOTAL_QUARTERS_COMPLETED FROM EMPLOYEES;
 
39. DISPLAY LAST_NAME , HIRE_DATE , TOTAL QUARTERS COMPLETED , EXTRA WEEKS COMPLETED.
 -> SELECT LAST_NAME, HIRE_DATE, TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE) / 12 * 4) TOTAL_QUARATER_COMPLETED, TRUNC((SYSDATE - HIRE_DATE) / 7) - TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE) * 30 / 7) EXTRA_WEEKS_COMPLETED FROM EMPLOYEES;
 
40. DISPLAY LAST_NAME , HIRE_DATE , TOTAL QUARTERS COMPLETED , EXTRA WEEKS COMPLETED , EXTRA DAYS COMPLETED.
 -> SELECT LAST_NAME, HIRE_DATE, TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE) / 12) * 4 TOTAL_QUARATER_COMPLETED, TRUNC((SYSDATE - HIRE_DATE) / 7) - TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE) * 30 / 7) EXTRA_WEEK_COMPLETED, TRUNC(SYSDATE - HIRE_DATE) - (TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE) / 12) * 4 * 90) - ((TRUNC((SYSDATE - HIRE_DATE) / 7) - TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE) * 30 / 7)) * 7) EXTRA_DAYS_COMPLETED FROM EMPLOYEES;

41. COMPANY MAKE EMPLOYEE PERMANENT AFTER 3 YEARS AND 3 QUARTERS OF JOINING DATE. DISPLAY FIRST_NAME , HIRE_DATE , PERMANENT_DATE.
 -> SELECT FIRST_NAME, HIRE_DATE, ADD_MONTHS(HIRE_DATE, 3 * 12 + 9) PERMAMENT_DATE FROM EMPLOYEES;
 
42. COMPANY INCREMENTS ON 1ST APRIL AFTER COMPLETION OF 2 YEARS. DISPLAY LAST_NAME , FIRST_NAME , INCREMENT_DATE.
 -> SELECT LAST_NAME, FIRST_NAME, NVL2(NULLIF(TRUNC(ADD_MONTHS(HIRE_DATE, 24), 'RR'), ROUND(ADD_MONTHS(HIRE_DATE, '24'), 'Q')), ADD_MONTHS(TRUNC(HIRE_DATE, 'RR'), 39),ADD_MONTHS(TRUNC(ADD_MONTHS(HIRE_DATE, 24), 'RR'), 3)) INCREMENT_DATE FROM EMPLOYEES;
 
43. COMPANY PAYS FIRST SALARY ON 1ST DATE AFTER COMPLETION OF FIRST MONTH. DISPLAY FIRST_NAME , HIRE_DATE AND FIRST_SALARY_DATE.
 -> SELECT FIRST_NAME, HIRE_DATE, ADD_MONTHS(TRUNC(HIRE_DATE, 'RR'), 13) FIRST_SALARY_DATE FROM EMPLOYEES;
 
44. IF HIRE DATE IS IN FIRST HALF OF MONTH, COMPANY PAYS ON NEXT MONTH'S FIRST DATE OTHER WISE NEXT TO NEXT MONTH'S FIRST DATE. DISPLAY LAST_NAME , HIRE_DATE AND FIRST_SALARY_DATE.
 -> SELECT LAST_NAME, HIRE_DATE, NVL2(NULLIF(ROUND(HIRE_DATE, 'MM'), TRUNC(HIRE_DATE, 'MM')), ADD_MONTHS(LAST_DAY(HIRE_DATE) + 1, 1), LAST_DAY(HIRE_DATE) + 1) FIRST_SALARY_DATE FROM EMPLOYEES;
 
45. DISPLAY FIRST_NAME , HIRE_DATE AND NO. OF DAYS WORKED IN FIRST MONTH.
 -> SELECT FIRST_NAME, HIRE_DATE, TRUNC(HIRE_DATE, 'MM'), TRUNC(HIRE_DATE, 'RR'), NVL2(NULLIF(TRUNC(HIRE_DATE, 'MM'), TRUNC(HIRE_DATE, 'RR')), 31, ADD_MONTHS(TRUNC(HIRE_DATE, 'MM'), 1) - HIRE_DATE) FROM EMPLOYEES;
 
46. COMPANY PAYS ON EACH MONTH'S 7TH DATE. DISPLAY NEXT SALARY DATE.
 -> SELECT ADD_MONTHS(TRUNC(SYSDATE, 'MM'), 1) + 6 FROM DUAL;
 
47. DISPLAY FIRST_NAME , HIRE_DATE AND DAY NO. OF HIRE QUARTER.
 -> SELECT FIRST_NAME, HIRE_DATE, HIRE_DATE - TRUNC(HIRE_DATE, 'Q') + 1 "DAY NO. OF HIRE QUARTER"  FROM EMPLOYEES;
 
48. DISPLAY LAST_NAME , HIRE_DATE AND DAY NO. OF HIRE YEAR.
 -> SELECT LAST_NAME, HIRE_DATE, HIRE_DATE - TRUNC(HIRE_DATE, 'RR') + 1 "DAY NO.OF HIRE YEAR" FROM EMPLOYEES;
 
49. DISPLAY FIRST_NAME , HIRE_DATE , NO. OF DAYS WORKED IN HIRED QUARTER AND NO. OF DAYS WORKED IN HIRE YEAR.
 -> SELECT FIRST_NAME, HIRE_DATE, ADD_MONTHS(TRUNC(HIRE_DATE, 'Q'), 3) - TRUNC(HIRE_DATE, 'Q') - (HIRE_DATE - TRUNC(HIRE_DATE, 'Q') + 1) "NO. OF DAYS WORKED IN HIRE QUARTER", ADD_MONTHS(TRUNC(HIRE_DATE, 'RR'), 12) - TRUNC(HIRE_DATE, 'RR') - (HIRE_DATE - TRUNC(HIRE_dATE, 'RR') + 1) "NO. OF DAYS WORKED IN HIRE YEAR"  FROM EMPLOYEES;
 
50. COMPANY DECLARES 20% BONUS ON YEARLY SALARY. EMPLOYEE WILL GET BONUS IN PROPORTION OF NO. OF DAYS WORKED IN HIRE YEAR. DISPLAY FIRST_NAME , HIRE_DATE , NO. OF DAYS WORKED IN HIRE YEAR, SALARY AND BONUS.
// DAOUT -> SELECT FIRST_NAME, HIRE_DATE, ADD_MONTHS(TRUNC(HIRE_DATE, 'RR'), 12) - TRUNC(HIRE_DATE, 'RR') - (HIRE_DATE - TRUNC(HIRE_DATE, 'RR') + 1) "NO. OF DAYS WORKED IN HIRE YEAR", SALARY FROM EMPLOYEES;
 