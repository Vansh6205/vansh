1 DISPLAY THOSE EMPLOYEES WHO GETS HIGHER SALARY THAN ALL EMPLOYEES OF DEPARTMENT 50
 -> SELECT *
	FROM EMPLOYEES
	WHERE SALARY > (SELECT MAX(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 60);

2 DISPLAY ALL EMPLOYEES WHO WERE HIRED BEFORE Diana
 -> SELECT *
	FROM EMPLOYEES
	WHERE HIRE_DATE < (SELECT HIRE_DATE FROM EMPLOYEES WHERE FIRST_NAME = 'Diana');

3 DISPLAY THOSE EMPLOYEES WHO WORKS IN Executive DEPARTMENT
 -> SELECT *
	FROM EMPLOYEES
	WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE DEPARTMENT_NAME = 'Executive');

4 DISPLAY THOSE WHO WORKS IN Toronto CITY
 -> SELECT *
	FROM EMPLOYEES
	WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM DEPARTMENTS NATURAL JOIN LOCATIONS WHERE CITY = 'Toronto');

5 DISPLAY THOSE WHO GETS LOWEST SALARY IN THEIR DEPARTMENT
 -> SELECT * 
	FROM EMPLOYEES
	WHERE (NVL(DEPARTMENT_ID, 0), SALARY) IN (SELECT NVL(DEPARTMENT_ID, 0), MIN(SALARY)
											  FROM EMPLOYEES GROUP BY DEPARTMENT_ID);
												
6 DISPLAY THOSE WHO GET HIGHEST SALARY FOR THEIR JOB_ID
 -> SELECT *
	FROM EMPLOYEES
	WHERE (JOB_ID, SALARY) = ANY (SELECT JOB_ID, MAX(SALARY)
								  FROM EMPLOYEES
								  GROUP BY JOB_ID);
							  
7 DISPLAY THOSE WHO GETS LOWEST SALARY FOR THEIR MANAGER
 -> SELECT *
	FROM EMPLOYEES
	WHERE (NVL(MANAGER_ID, 0), SALARY) = SOME (SELECT NVL(MANAGER_ID, 0), MIN(SALARY)
											   FROM EMPLOYEES GROUP BY MANAGER_ID);     
										   
8 DISPLAY THOSE WHO GETS HIGHEST SALARY FOR THEIR HIRE YEAR
 -> SELECT *
	FROM EMPLOYEES
	WHERE SALARY IN (SELECT MAX(SALARY)
					 FROM EMPLOYEES GROUP BY TO_CHAR(HIRE_DATE, 'RR')) ORDER BY HIRE_DATE;                         
				 
9 DISPLAY FIRST_NAME AND SALARY FOR THE EMPLOYEES WHO GETS HIGHEST SALARY QUARTER WISE (IGNORE YEAR)
 -> SELECT FIRST_NAME, SALARY
	FROM EMPLOYEES
	WHERE (TO_CHAR(HIRE_DATE, 'Q'), SALARY) = ANY (SELECT TO_CHAR(HIRE_DATE, 'Q'), MAX(SALARY)
												   FROM EMPLOYEES GROUP BY TO_CHAR(HIRE_DATE, 'Q'));
											   
10 DISPLAY FIRST_NAME FOR THE EMPLOYEES WHO WORKS IN United States of America
 -> SELECT FIRST_NAME
	FROM EMPLOYEES 
	WHERE DEPARTMENT_ID = SOME (SELECT DEPARTMENT_ID
								FROM DEPARTMENTS
								NATURAL JOIN LOCATIONS
								NATURAL JOIN COUNTRIES WHERE COUNTRY_ID = 'US');
							
11 DISPLAY LAST_NAME FOR THE EMPLOYEES WHO WORKS IN Europe
 -> SELECT LAST_NAME
	FROM EMPLOYEES
	WHERE DEPARTMENT_ID = SOME (SELECT DEPARTMENT_ID
								FROM DEPARTMENTS
								NATURAL JOIN LOCATIONS
								NATURAL JOIN COUNTRIES
								NATURAL JOIN REGIONS WHERE REGION_ID = 1);
							
12 DISPLAY FIRST_NAME , JOB_ID FOR THE EMPLOYEES WHO WORKS AS Programmer
 -> SELECT FIRST_NAME, JOB_ID
	FROM EMPLOYEES
	WHERE JOB_ID = ANY (SELECT JOB_ID
						FROM JOBS
						WHERE JOB_TITLE = 'Programmer');
					
13 DISPLAY DEPARTMENT_NAME WHICH IS LOCATED IN Canada
 -> SELECT DEPARTMENT_NAME
	FROM DEPARTMENTS
	WHERE LOCATION_ID = (SELECT LOCATION_ID
						 FROM LOCATIONS
						 NATURAL JOIN COUNTRIES WHERE COUNTRY_ID = 'CA');
					 
14 DISPLAY CITY WHICH IS LOCATED IN Europe
 -> SELECT CITY
	FROM LOCATIONS
	WHERE COUNTRY_ID IN (SELECT COUNTRY_ID
						 FROM COUNTRIES
						 NATURAL JOIN REGIONS
						 WHERE REGION_ID = 1);
					
15 DISPLAY THOSE WHO REPORTS TO ANY MANAGER (19 ROWS)
 -> SELECT *
	FROM EMPLOYEES
	WHERE MANAGER_ID IS NOT NULL;

16 DISPLAY THOSE WHO REPORTS TO ANY DEPARTMENT HEAD (16 ROWS)
 -> SELECT *
	FROM EMPLOYEES
	WHERE MANAGER_ID = SOME (SELECT MANAGER_ID 
							 FROM DEPARTMENTS);
						 
17 DISPLAY THOSE WHO REPORTS TO HIS DEPARTMENT'S HEAD (12 ROWS)
 -> SELECT *
	FROM EMPLOYEES
	WHERE (DEPARTMENT_ID, MANAGER_ID) = SOME (SELECT DEPARTMENT_ID, MANAGER_ID 
											  FROM DEPARTMENTS);
										  
18 DISPLAY THOSE WHO REPORTS TO Kevin.
 -> SELECT *
	FROM EMPLOYEES
	WHERE MANAGER_ID = (SELECT EMPLOYEE_ID
						FROM EMPLOYEES
						WHERE FIRST_NAME = 'Kevin');
					
19 DISPLAY THOSE WHO REPORTS TO MANAGER OF Michael.
 -> SELECT *
	FROM EMPLOYEES
	WHERE MANAGER_ID = (SELECT MANAGER_ID
						FROM EMPLOYEES
						WHERE FIRST_NAME = 'Michael');
					
20 DISPLAY ALL EXCEPT THOSE WHO REPORTS TO Neena.
 -> SELECT *
	FROM EMPLOYEES
	WHERE NVL(MANAGER_ID, 0) <> (SELECT EMPLOYEE_ID
								 FROM EMPLOYEES
								 WHERE FIRST_NAME = 'Neena');     
					 
21 DISPLAY ALL EXCEPT THOSE WHO REPORTS TO MANAGER OF Peter.
 -> SELECT *
	FROM EMPLOYEES
	WHERE NVL(MANAGER_ID, 0) <> (SELECT NVL(MANAGER_ID, 0)
								 FROM EMPLOYEES
								 WHERE FIRST_NAME = 'Peter');
							 
22 DISPLAY THOSE WHO REPORTS TO Steven OR Eleni.
 -> SELECT *
	FROM EMPLOYEES
	WHERE MANAGER_ID = ANY ((SELECT EMPLOYEE_ID FROM EMPLOYEES WHERE FIRST_NAME = 'Steven'), 
							(SELECT EMPLOYEE_ID FROM EMPLOYEES WHERE FIRST_NAME = 'Eleni'));
						
23 DISPLAY THOSE EMPLOYEES WHO GETS SALARY IN THE RANGE BETWEEN Shelley and Jennifer.
 -> SELECT *
	FROM EMPLOYEES
	WHERE SALARY BETWEEN (SELECT SALARY FROM EMPLOYEES WHERE FIRST_NAME = 'Jennifer')
					 AND (SELECT SALARY FROM EMPLOYEES WHERE FIRST_NAME = 'Shelley');
				 
24 DISPLAY THOSE WHO WERE JOINED BETWEEN Kimerely and Shelley. (INCLUDING BOTH)
 -> SELECT *
	FROM EMPLOYEES
	WHERE HIRE_DATE BETWEEN (SELECT HIRE_DATE FROM EMPLOYEES WHERE FIRST_NAME = 'Shelley')
						AND (SELECT HIRE_DATE FROM EMPLOYEES WHERE FIRST_NAME = 'Kimerely');
					
25 DISPLAY ALL OTHER THAN THOSE WHO GETS SALARY IN THE SALARY RANGE OF Shelley and Kimerely. (LEAST, GREATEST)
 -> SELECT *
	FROM EMPLOYEES
	WHERE SALARY NOT BETWEEN (SELECT SALARY FROM EMPLOYEES WHERE FIRST_NAME = 'Kimerely')
						 AND (SELECT SALARY FROM EMPLOYEES WHERE FIRST_NAME = 'Shelley'); 
					 
26 DISPLAY ALL WHO GETS SALARY IN GRADE_LEVEL D.
 -> SELECT *
	FROM EMPLOYEES
	WHERE SALARY IN (SELECT SALARY 
					 FROM EMPLOYEES 
					 JOIN JOB_GRADES ON SALARY BETWEEN LOWEST_SAL AND HIGHEST_SAL 
					 WHERE GRADE_LEVEL = 'D');
				 
27 DISPLAY ALL WHO GETS SALARY IN THE RANGE OF Sales Manager.
 -> SELECT *
	FROM EMPLOYEES
	WHERE SALARY BETWEEN (SELECT MIN_SALARY FROM JOBS WHERE JOB_TITLE = 'Sales Manager')
					 AND (SELECT MAX_SALARY FROM JOBS WHERE JOB_TITLE = 'Sales Manager');
				 
28 DISPLAY ALL OTHER THAN THOSE WHO GETS SALARY IN GRADE_LEVEL C AND E.
 -> SELECT *
	FROM EMPLOYEES
	WHERE SALARY = SOME (SELECT SALARY
						 FROM EMPLOYEES
						 JOIN JOB_GRADES ON SALARY BETWEEN LOWEST_SAL AND HIGHEST_SAL
						 WHERE GRADE_LEVEL <> 'C' AND GRADE_LEVEL ^= 'E');                                            
					 
29 DISPLAY ALL OTHER THAN THOSE WHO GETS SALARY OUTSIDE RANGE OF Programmer.
 -> SELECT *
	FROM EMPLOYEES
	WHERE SALARY NOT BETWEEN (SELECT MIN_SALARY FROM JOBS WHERE JOB_TITLE = 'Programmer')
                     AND (SELECT MAX_SALARY FROM JOBS WHERE JOB_TITLE = 'Programmer');
					 
30 DISPLAY ALL WHO GETS SALARY IN THE RANGE OF Sales Representative BUT NOT IN THE RANGE OF Accounting Manager.
 -> SELECT *
	FROM EMPLOYEES
	WHERE SALARY BETWEEN (SELECT MIN_SALARY FROM JOBS WHERE JOB_TITLE = 'Sales Representative')
					 AND (SELECT MAX_SALARY FROM JOBS WHERE JOB_TITLE = 'Sales Representative')
	  AND SALARY NOT BETWEEN (SELECT MIN_SALARY FROM JOBS WHERE JOB_TITLE = 'Accounting Manager')
						 AND (SELECT MAX_SALARY FROM JOBS WHERE JOB_TITLE = 'Accounting Manager');